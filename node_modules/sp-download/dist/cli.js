#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var node_sp_auth_config_1 = require("node-sp-auth-config");
var path = require("path");
var colors = require("colors");
var Download_1 = require("./api/Download");
program
    .version('1.0.0')
    .usage('--url=<file ...> [options]')
    .option('-u, --url [value]', 'full path to the file in SharePoint, required')
    .option('-o, --out [value]', 'local directory or path to file where downloaded file should be saved, optional, default is `./`')
    .option('-s, --site [value]', 'SharePoint SPWeb url, optional, default is requested based on `url`')
    .option('-c, --conf [value]', 'Path to private configuration file')
    .option('-d, --ondemand', 'On-Demand auth request, optional')
    .parse(process.argv);
var argv = program;
var download = function (context, params) {
    var _a = new Download_1.Download(context.authOptions), downloadFile = _a.downloadFile, downloadFileFromSite = _a.downloadFileFromSite;
    if (typeof params.site === 'undefined') {
        return downloadFile(params.url, params.out)
            .then(function (savedToPath) {
            console.log(params.url + " has been downloaded to " + savedToPath);
        });
    }
    else {
        return downloadFileFromSite(params.site, params.url, params.out)
            .then(function (savedToPath) {
            console.log(params.url + " has been downloaded to " + savedToPath);
        });
    }
};
(function () {
    if (typeof argv.url === 'undefined') {
        console.log(colors.red("'" + colors.bold('--url') + "' parameter should be provided"), colors.gray("(full path to the file in SharePoint to download)"));
        return;
    }
    if (typeof argv.out === 'undefined') {
        console.log(colors.yellow("'" + colors.bold('--out') + "' parameter is not provided"), colors.gray("(folder of file path to save the file to)"));
    }
    if (typeof argv.conf === 'undefined' && (argv.ondemand || '').toLowerCase() !== 'true') {
        console.log(colors.yellow("'" + colors.bold('--conf') + "' parameter is not provided"), colors.gray("(the default configuration path is used)"));
    }
    if ((argv.ondemand || '').toLowerCase() === 'true') {
        download({ ondemand: true }, argv)
            .catch(function (error) {
            console.log(colors.red(colors.bold('Error:') + " " + error));
        });
    }
    else {
        var authConfSettings_1 = {
            configPath: path.resolve(argv.conf || './config/private.json'),
            defaultConfigPath: path.join(__dirname, './config/default.json'),
            encryptPassword: true,
            saveConfigOnDisk: true
        };
        var authConfig = new node_sp_auth_config_1.AuthConfig(authConfSettings_1);
        authConfig.getContext()
            .then(function (context) {
            console.log(colors.gray("Config file: " + colors.green(authConfSettings_1.configPath)));
            if (context.siteUrl) {
                console.log(colors.gray("SP site URL: " + colors.green(context.siteUrl)));
            }
            return download(context, argv);
        })
            .catch(function (error) {
            console.log(colors.red(colors.bold('Error:') + " " + error));
        });
    }
})();

//# sourceMappingURL=cli.js.map
