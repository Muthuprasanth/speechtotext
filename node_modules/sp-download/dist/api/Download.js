"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var sp_request_1 = require("sp-request");
var node_sp_auth_1 = require("node-sp-auth");
var node_sp_auth_config_1 = require("node-sp-auth-config");
var fs = require("fs");
var path = require("path");
var mkdirp = require("mkdirp");
var https = require("https");
var colors = require("colors");
var request = require("request");
var isUrlHttps = function (url) {
    return url.split('://')[0].toLowerCase() === 'https';
};
var Download = (function () {
    function Download(context) {
        var _this = this;
        this.downloadFile = function (spFileAbsolutePath, saveTo) {
            if (saveTo === void 0) { saveTo = './'; }
            console.log(colors.gray("Downloading: " + colors.green(spFileAbsolutePath)));
            var childUrlArr = spFileAbsolutePath.split('/');
            childUrlArr.pop();
            var childUrl = childUrlArr.join('/');
            return _this.getWebByAnyChildUrl(childUrl)
                .then(function (web) {
                var baseHostPath = web.Url.replace(web.ServerRelativeUrl, '');
                var spRelativeFilePath = spFileAbsolutePath.replace(baseHostPath, '');
                return _this.downloadFileAsStream(web.Url, spRelativeFilePath, saveTo);
            });
        };
        this.downloadFileFromSite = function (siteUrl, spRelativeFilePath, saveTo) {
            if (saveTo === void 0) { saveTo = './'; }
            console.log(colors.gray("Downloading: " + colors.green(spRelativeFilePath)));
            return _this.downloadFileAsStream(siteUrl, spRelativeFilePath, saveTo);
        };
        this.downloadFileAsStream = function (siteUrl, spRelativeFilePath, saveTo) {
            if (saveTo === void 0) { saveTo = './'; }
            return new Promise(function (resolve, reject) {
                var endpointUrl;
                if (spRelativeFilePath.indexOf('/_vti_history/') !== -1) {
                    var hostUrl = siteUrl.replace('://', '___').split('/')[0].replace('___', '://');
                    endpointUrl = "" + hostUrl + encodeURIComponent(spRelativeFilePath).replace(/%2F/g, '/');
                }
                else {
                    endpointUrl = siteUrl + "/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/$value" +
                        ("?@FileServerRelativeUrl='" + encodeURIComponent(spRelativeFilePath) + "'");
                }
                var saveFilePath = _this.getSaveFilePath(saveTo, spRelativeFilePath);
                var saveFolderPath = path.dirname(saveFilePath);
                mkdirp(saveFolderPath, function (err) {
                    if (err) {
                        return reject(err);
                    }
                    node_sp_auth_1.getAuth(siteUrl, _this.context).then(function (auth) {
                        var options = __assign({ url: endpointUrl, method: 'GET', headers: __assign({}, auth.headers, { 'User-Agent': 'sp-download' }), encoding: null, strictSSL: false, gzip: true, agent: isUrlHttps(siteUrl) ? _this.agent : undefined }, auth.options);
                        request(options)
                            .pipe(fs.createWriteStream(saveFilePath))
                            .on('error', reject)
                            .on('finish', function () {
                            resolve(saveFilePath);
                        });
                    }).catch(reject);
                });
            });
        };
        this.getWebByAnyChildUrl = function (anyChildUrl) {
            return new Promise(function (resolve, reject) {
                var restUrl = anyChildUrl + "/_api/web?$select=Url,ServerRelativeUrl";
                _this.spr.get(restUrl)
                    .then(function (response) {
                    resolve(response.body.d);
                })
                    .catch(function (err) {
                    if (err.statusCode === 404) {
                        var childUrlArr = anyChildUrl.split('/');
                        childUrlArr.pop();
                        var childUrl = childUrlArr.join('/');
                        if (childUrlArr.length <= 3) {
                            return reject("Wrong url, can't get Web property");
                        }
                        else {
                            return resolve(_this.getWebByAnyChildUrl(childUrl));
                        }
                    }
                    else if (err.statusCode === 401) {
                        console.log(colors.red('401, Access Denied'));
                        _this.promptForCreds()
                            .then(function () {
                            return resolve(_this.getWebByAnyChildUrl(anyChildUrl));
                        })
                            .catch(reject);
                    }
                    else {
                        return reject(err.message);
                    }
                });
            });
        };
        this.initContext = function (context) {
            _this.spr = sp_request_1.create(context);
            _this.context = context;
            _this.agent = new https.Agent({
                rejectUnauthorized: false,
                keepAlive: true,
                keepAliveMsecs: 10000
            });
        };
        this.promptForCreds = function () {
            return (new node_sp_auth_config_1.AuthConfig({
                authOptions: _this.context,
                forcePrompts: true
            }))
                .getContext()
                .then(function (context) {
                _this.initContext(context.authOptions);
                console.log(colors.gray('Trying to download with new creds...'));
                return context;
            });
        };
        this.getSaveFilePath = function (saveTo, spRelativeFilePath) {
            var saveFilePath = path.resolve(saveTo);
            var originalFileName = decodeURIComponent(spRelativeFilePath).split('/').pop();
            try {
                if (fs.lstatSync(saveFilePath).isDirectory()) {
                    saveFilePath = path.join(saveFilePath, originalFileName);
                }
            }
            catch (e) {
            }
            if (path.parse(saveFilePath).ext !== path.parse(originalFileName).ext) {
                saveFilePath = path.join(saveFilePath, originalFileName);
            }
            return saveFilePath;
        };
        this.initContext(context);
    }
    return Download;
}());
exports.Download = Download;

//# sourceMappingURL=Download.js.map
