{"version":3,"sources":["api/Download.ts"],"names":[],"mappings":"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","file":"Download.js","sourcesContent":["import { create as createRequest, ISPRequest } from 'sp-request';\r\nimport { getAuth, IAuthOptions } from 'node-sp-auth';\r\nimport { AuthConfig } from 'node-sp-auth-config';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as mkdirp from 'mkdirp';\r\nimport * as https from 'https';\r\nimport * as colors from 'colors';\r\n\r\nimport * as request from 'request';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { OptionsWithUrl } from 'request';\r\n\r\nconst isUrlHttps: any = (url: string): boolean => {\r\n  return url.split('://')[0].toLowerCase() === 'https';\r\n};\r\n\r\nexport class Download {\r\n\r\n  private spr: ISPRequest;\r\n  private context: IAuthOptions;\r\n  private agent: https.Agent;\r\n\r\n  constructor (context: IAuthOptions) {\r\n    this.initContext(context);\r\n  }\r\n\r\n  public downloadFile = (spFileAbsolutePath: string, saveTo: string = './'): Promise<any> => {\r\n    console.log(colors.gray(`Downloading: ${colors.green(spFileAbsolutePath)}`));\r\n    let childUrlArr = spFileAbsolutePath.split('/');\r\n    childUrlArr.pop();\r\n    let childUrl = childUrlArr.join('/');\r\n    return this.getWebByAnyChildUrl(childUrl)\r\n      .then((web: any) => {\r\n        let baseHostPath = web.Url.replace(web.ServerRelativeUrl, '');\r\n        let spRelativeFilePath = spFileAbsolutePath.replace(baseHostPath, '');\r\n        // return this.downloadFileFromSite(web.Url, spRelativeFilePath, saveTo);\r\n        return this.downloadFileAsStream(web.Url, spRelativeFilePath, saveTo);\r\n      });\r\n  }\r\n\r\n  public downloadFileFromSite = (siteUrl: string, spRelativeFilePath: string, saveTo: string = './'): Promise<any> => {\r\n    console.log(colors.gray(`Downloading: ${colors.green(spRelativeFilePath)}`));\r\n    return this.downloadFileAsStream(siteUrl, spRelativeFilePath, saveTo);\r\n    // // Download using sp-request, without streaming, consumes lots of memory in case of large files\r\n    // return new Promise((resolve, reject) => {\r\n    //     let restUrl = `${siteUrl}/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/OpenBinaryStream` +\r\n    //                   `?@FileServerRelativeUrl='${encodeURIComponent(spRelativeFilePath)}'`;\r\n\r\n    //     let saveFilePath = this.getSaveFilePath(saveTo, spRelativeFilePath);\r\n    //     let saveFolderPath = path.dirname(saveFilePath);\r\n\r\n    //     this.spr.get(restUrl, { encoding: null })\r\n    //         .then(response => {\r\n    //             if (/.json$/.test(saveFilePath)) {\r\n    //                 response.body = JSON.stringify(response.body, null, 4);\r\n    //             }\r\n    //             if (/.map$/.test(saveFilePath)) {\r\n    //                 response.body = JSON.stringify(response.body);\r\n    //             }\r\n    //             mkdirp(saveFolderPath, err => {\r\n    //                 // tslint:disable-next-line:no-shadowed-variable\r\n    //                 fs.writeFile(saveFilePath, response.body, err => {\r\n    //                     if (err) {\r\n    //                         throw err;\r\n    //                     }\r\n    //                     resolve(saveFilePath);\r\n    //                 });\r\n    //             });\r\n    //         })\r\n    //         .catch(err => {\r\n    //             reject(err.message);\r\n    //         });\r\n    // });\r\n  }\r\n\r\n  private downloadFileAsStream = (siteUrl: string, spRelativeFilePath: string, saveTo: string = './') => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let endpointUrl: string;\r\n\r\n      if (spRelativeFilePath.indexOf('/_vti_history/') !== -1) {\r\n        const hostUrl = siteUrl.replace('://', '___').split('/')[0].replace('___', '://');\r\n        endpointUrl = `${hostUrl}${encodeURIComponent(spRelativeFilePath).replace(/%2F/g, '/')}`;\r\n      } else {\r\n        endpointUrl = `${siteUrl}/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/$value` +\r\n          `?@FileServerRelativeUrl='${encodeURIComponent(spRelativeFilePath)}'`;\r\n      }\r\n\r\n      let saveFilePath = this.getSaveFilePath(saveTo, spRelativeFilePath);\r\n      let saveFolderPath = path.dirname(saveFilePath);\r\n\r\n      mkdirp(saveFolderPath, err => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        getAuth(siteUrl, this.context).then(auth => {\r\n\r\n          let options: OptionsWithUrl = {\r\n            url: endpointUrl,\r\n            method: 'GET',\r\n            headers: {\r\n              ...auth.headers,\r\n              'User-Agent': 'sp-download'\r\n            },\r\n            encoding: null,\r\n            strictSSL: false,\r\n            gzip: true,\r\n            agent: isUrlHttps(siteUrl) ? this.agent : undefined,\r\n            ...auth.options\r\n          };\r\n\r\n          request(options)\r\n            .pipe(fs.createWriteStream(saveFilePath))\r\n            .on('error', reject)\r\n            .on('finish', () => {\r\n              resolve(saveFilePath);\r\n            });\r\n\r\n        }).catch(reject);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  private getWebByAnyChildUrl = (anyChildUrl: string) => {\r\n    return new Promise((resolve, reject) => {\r\n      let restUrl = `${anyChildUrl}/_api/web?$select=Url,ServerRelativeUrl`;\r\n      this.spr.get(restUrl)\r\n        .then(response => {\r\n          resolve(response.body.d);\r\n        })\r\n        .catch(err => {\r\n          if (err.statusCode === 404) {\r\n            let childUrlArr = anyChildUrl.split('/');\r\n            childUrlArr.pop();\r\n            let childUrl = childUrlArr.join('/');\r\n            if (childUrlArr.length <= 3) {\r\n              return reject(`Wrong url, can't get Web property`);\r\n            } else {\r\n              return resolve(this.getWebByAnyChildUrl(childUrl));\r\n            }\r\n          } else if (err.statusCode === 401) {\r\n            console.log(colors.red('401, Access Denied'));\r\n            this.promptForCreds()\r\n              .then(() => {\r\n                return resolve(this.getWebByAnyChildUrl(anyChildUrl));\r\n              })\r\n              .catch(reject);\r\n          } else {\r\n            return reject(err.message);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  private initContext = (context: IAuthOptions) => {\r\n    this.spr = createRequest(context);\r\n    this.context = context;\r\n    this.agent = new https.Agent({\r\n      rejectUnauthorized: false,\r\n      keepAlive: true,\r\n      keepAliveMsecs: 10000\r\n    });\r\n  }\r\n\r\n  private promptForCreds = (): Promise<any> => {\r\n    return (new AuthConfig({\r\n      authOptions: this.context,\r\n      forcePrompts: true\r\n    }))\r\n      .getContext()\r\n      .then(context => {\r\n        this.initContext(context.authOptions);\r\n        console.log(colors.gray('Trying to download with new creds...'));\r\n        return context;\r\n      });\r\n  }\r\n\r\n  private getSaveFilePath = (saveTo: string, spRelativeFilePath: string): string => {\r\n    let saveFilePath = path.resolve(saveTo);\r\n    let originalFileName = decodeURIComponent(spRelativeFilePath).split('/').pop();\r\n\r\n    try {\r\n      if (fs.lstatSync(saveFilePath).isDirectory()) {\r\n        saveFilePath = path.join(saveFilePath, originalFileName);\r\n      }\r\n    } catch (e) {\r\n      //\r\n    }\r\n\r\n    if (path.parse(saveFilePath).ext !== path.parse(originalFileName).ext) {\r\n      saveFilePath = path.join(saveFilePath, originalFileName);\r\n    }\r\n\r\n    return saveFilePath;\r\n  }\r\n\r\n}\r\n"]}