{"version":3,"sources":["cli.ts"],"names":[],"mappings":";;;AAGA,mCAAqC;AACrC,2DAAsE;AACtE,2BAA6B;AAC7B,+BAAiC;AAEjC,2CAA0C;AAG1C,OAAO;KACJ,OAAO,CAAC,OAAO,CAAC;KAChB,KAAK,CAAC,4BAA4B,CAAC;KACnC,MAAM,CAAC,mBAAmB,EAAE,+CAA+C,CAAC;KAC5E,MAAM,CAAC,mBAAmB,EAAE,kGAAkG,CAAC;KAC/H,MAAM,CAAC,oBAAoB,EAAE,qEAAqE,CAAC;KACnG,MAAM,CAAC,oBAAoB,EAAE,oCAAoC,CAAC;KAClE,MAAM,CAAC,gBAAgB,EAAE,kCAAkC,CAAC;KAC5D,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEvB,IAAM,IAAI,GAAkB,OAAc,CAAC;AAE3C,IAAM,QAAQ,GAAG,UAAC,OAAY,EAAE,MAAqB;IAC7C,IAAA,iDAA0E,EAAxE,8BAAY,EAAE,8CAAoB,CAAuC;IACjF,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;aACxC,IAAI,CAAC,UAAA,WAAW;YACf,OAAO,CAAC,GAAG,CAAI,MAAM,CAAC,GAAG,gCAA2B,WAAa,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;aAC7D,IAAI,CAAC,UAAA,WAAW;YACf,OAAO,CAAC,GAAG,CAAI,MAAM,CAAC,GAAG,gCAA2B,WAAa,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACP,CAAC;AACH,CAAC,CAAC;AAGF,CAAC;IAGC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC;QACpC,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,GAAG,CAAC,MAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,mCAAgC,CAAC,EACpE,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CACjE,CAAC;QACF,MAAM,CAAC;IACT,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC;QACpC,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,MAAM,CAAC,MAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gCAA6B,CAAC,EACpE,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CACzD,CAAC;IACJ,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;QACvF,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,MAAM,CAAC,MAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gCAA6B,CAAC,EACrE,MAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CACxD,CAAC;IACJ,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;QAEnD,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC;aAC/B,KAAK,CAAC,UAAA,KAAK;YACV,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAI,KAAO,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IAEP,CAAC;IAAC,IAAI,CAAC,CAAC;QAEN,IAAI,kBAAgB,GAAwB;YAC1C,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,uBAAuB,CAAC;YAC9D,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC;YAChE,eAAe,EAAE,IAAI;YACrB,gBAAgB,EAAE,IAAI;SACvB,CAAC;QAEF,IAAM,UAAU,GAAG,IAAI,gCAAU,CAAC,kBAAgB,CAAC,CAAC;QAEpD,UAAU,CAAC,UAAU,EAAE;aACpB,IAAI,CAAC,UAAA,OAAO;YACX,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAgB,MAAM,CAAC,KAAK,CAAC,kBAAgB,CAAC,UAAU,CAAG,CAAC,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAgB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAG,CAAC,CAAC,CAAC;YAC5E,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACV,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAI,KAAO,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;AAEH,CAAC,CAAC,EAAE,CAAC","file":"cli.js","sourcesContent":["#!/usr/bin/env node\r\n\r\n// import * as minimist from 'minimist';\r\nimport * as program from 'commander';\r\nimport { AuthConfig, IAuthConfigSettings } from 'node-sp-auth-config';\r\nimport * as path from 'path';\r\nimport * as colors from 'colors';\r\n\r\nimport { Download } from './api/Download';\r\nimport { IDownloadArgv } from './interface/ICli';\r\n\r\nprogram\r\n  .version('1.0.0')\r\n  .usage('--url=<file ...> [options]')\r\n  .option('-u, --url [value]', 'full path to the file in SharePoint, required')\r\n  .option('-o, --out [value]', 'local directory or path to file where downloaded file should be saved, optional, default is `./`')\r\n  .option('-s, --site [value]', 'SharePoint SPWeb url, optional, default is requested based on `url`')\r\n  .option('-c, --conf [value]', 'Path to private configuration file')\r\n  .option('-d, --ondemand', 'On-Demand auth request, optional')\r\n  .parse(process.argv);\r\n\r\nconst argv: IDownloadArgv = program as any;\r\n\r\nconst download = (context: any, params: IDownloadArgv) => {\r\n  const { downloadFile, downloadFileFromSite } = new Download(context.authOptions);\r\n  if (typeof params.site === 'undefined') {\r\n    return downloadFile(params.url, params.out)\r\n      .then(savedToPath => {\r\n        console.log(`${params.url} has been downloaded to ${savedToPath}`);\r\n      });\r\n  } else {\r\n    return downloadFileFromSite(params.site, params.url, params.out)\r\n      .then(savedToPath => {\r\n        console.log(`${params.url} has been downloaded to ${savedToPath}`);\r\n      });\r\n  }\r\n};\r\n\r\n// tslint:disable-next-line:no-unused-expression\r\n(() => {\r\n\r\n  // Required parameters check\r\n  if (typeof argv.url === 'undefined') {\r\n    console.log(\r\n      colors.red(`'${colors.bold('--url')}' parameter should be provided`),\r\n      colors.gray(`(full path to the file in SharePoint to download)`)\r\n    );\r\n    return;\r\n  }\r\n  if (typeof argv.out === 'undefined') {\r\n    console.log(\r\n      colors.yellow(`'${colors.bold('--out')}' parameter is not provided`),\r\n      colors.gray(`(folder of file path to save the file to)`)\r\n    );\r\n  }\r\n  if (typeof argv.conf === 'undefined' && (argv.ondemand || '').toLowerCase() !== 'true') {\r\n    console.log(\r\n      colors.yellow(`'${colors.bold('--conf')}' parameter is not provided`),\r\n      colors.gray(`(the default configuration path is used)`)\r\n    );\r\n  }\r\n\r\n  if ((argv.ondemand || '').toLowerCase() === 'true') {\r\n\r\n    download({ ondemand: true }, argv)\r\n      .catch(error => {\r\n        console.log(colors.red(`${colors.bold('Error:')} ${error}`));\r\n      });\r\n\r\n  } else {\r\n\r\n    let authConfSettings: IAuthConfigSettings = {\r\n      configPath: path.resolve(argv.conf || './config/private.json'),\r\n      defaultConfigPath: path.join(__dirname, './config/default.json'),\r\n      encryptPassword: true,\r\n      saveConfigOnDisk: true\r\n    };\r\n\r\n    const authConfig = new AuthConfig(authConfSettings);\r\n\r\n    authConfig.getContext()\r\n      .then(context => {\r\n        console.log(colors.gray(`Config file: ${colors.green(authConfSettings.configPath)}`));\r\n        if (context.siteUrl) {\r\n          console.log(colors.gray(`SP site URL: ${colors.green(context.siteUrl)}`));\r\n        }\r\n        return download(context, argv);\r\n      })\r\n      .catch(error => {\r\n        console.log(colors.red(`${colors.bold('Error:')} ${error}`));\r\n      });\r\n  }\r\n\r\n})();\r\n"]}