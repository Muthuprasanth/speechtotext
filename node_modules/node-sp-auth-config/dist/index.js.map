{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { Cpass } from 'cpass';\r\nimport * as spauth from 'node-sp-auth';\r\n\r\n// Utils\r\nimport { convertSettingsToAuthContext, saveConfigOnDisk, getHiddenPropertyName } from './utils';\r\n\r\n// Step wizards\r\nimport siteUrlWizard from './wizards/siteUrl';\r\nimport strategyWizard from './wizards/chooseStrategy';\r\nimport credentialsWizard from './wizards/askCredentials';\r\nimport saveOnDiskWizard from './wizards/saveOnDisk';\r\n\r\nimport { getStrategies, getTargetsTypes } from './config';\r\n\r\n// Auth interfaces >>>\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { IAuthOptions, IAuthResponse } from 'node-sp-auth';\r\n// <<< Auth interfaces\r\n\r\nimport {\r\n  IAuthContext, IAuthContextSettings, IStrategyDictItem,\r\n  IAuthConfigSettings, ICheckPromptsResponse\r\n} from './interfaces';\r\n\r\nexport class AuthConfig {\r\n\r\n  private settings: IAuthConfigSettings;\r\n  private targets: string[];\r\n  private strategies: IStrategyDictItem[];\r\n  private context: IAuthContextSettings;\r\n  private customData: any;\r\n  private cpass: Cpass;\r\n\r\n  constructor (settings: IAuthConfigSettings = {}) {\r\n    this.strategies = getStrategies();\r\n    this.targets = getTargetsTypes();\r\n    this.settings = {\r\n      ...settings,\r\n      configPath: path.resolve(settings.configPath || './config/private.json'),\r\n      encryptPassword: typeof settings.encryptPassword !== 'undefined' ? settings.encryptPassword : true,\r\n      saveConfigOnDisk: typeof settings.saveConfigOnDisk !== 'undefined' ? settings.saveConfigOnDisk : true\r\n    };\r\n    if (typeof this.settings.encryptPassword === 'string') {\r\n      this.settings.encryptPassword = !((this.settings.encryptPassword as string).toLowerCase() === 'false');\r\n    }\r\n    this.cpass = new Cpass(settings.masterKey);\r\n  }\r\n\r\n  public getContext = (): Promise<IAuthContext> => {\r\n    // console.log('Config path: ' + this.settings.configPath);\r\n    return this.checkForPrompts()\r\n      .then((checkPromptsResponse): Promise<IAuthContext> => {\r\n        let authContext: IAuthContext = {\r\n          ...checkPromptsResponse.authContext,\r\n          settings: this.settings\r\n        };\r\n\r\n        if (!checkPromptsResponse.needPrompts) {\r\n\r\n          if (checkPromptsResponse.needSave) {\r\n            return saveConfigOnDisk(authContext, this.settings)\r\n              .then(_ => authContext);\r\n          } else {\r\n            return new Promise(r => r(authContext));\r\n          }\r\n\r\n        } else {\r\n\r\n          // Step 1: Require SharePoint URL\r\n          return siteUrlWizard(authContext, {}, this.settings)\r\n            .then((answersResult) => {\r\n              // Step 2: SharePoint Online/OnPremise autodetection\r\n              return strategyWizard(authContext, answersResult, this.settings);\r\n            })\r\n            .then((answersResult) => {\r\n              // Step 3: Ask for strategy specific parameters\r\n              return credentialsWizard(authContext, answersResult, this.settings);\r\n            })\r\n            .then((answersResult) => {\r\n              // Step 4: Save on disk\r\n              if (typeof this.customData !== 'undefined') {\r\n                answersResult.custom = this.customData;\r\n              }\r\n              return saveOnDiskWizard(authContext, answersResult, this.settings);\r\n            })\r\n            .then((answersResult) => {\r\n              // Return wizard data\r\n              return convertSettingsToAuthContext(answersResult as any, this.settings);\r\n            });\r\n\r\n        }\r\n      });\r\n  }\r\n\r\n  private tryAuth = (authContext: IAuthContext): Promise<IAuthResponse> => {\r\n    return spauth.getAuth(authContext.siteUrl, authContext.authOptions) as any;\r\n  }\r\n\r\n  private checkForPrompts = (): Promise<ICheckPromptsResponse> => {\r\n    let getJsonContent = (filePath: string, jsonData?: IAuthOptions): Promise<any> => {\r\n      return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n        if (typeof jsonData === 'undefined') {\r\n          fs.exists(filePath, (exists: boolean) => {\r\n            let jsonRawData: any = {};\r\n            if (exists) {\r\n              try {\r\n                jsonRawData = JSON.parse(fs.readFileSync(path.resolve(filePath)).toString());\r\n              } catch (ex) {\r\n                //\r\n              }\r\n            }\r\n            if (typeof jsonRawData.custom !== 'undefined') {\r\n              this.customData = jsonRawData.custom;\r\n              delete jsonRawData.custom;\r\n            }\r\n            resolve({ exists, jsonRawData });\r\n          });\r\n        } else {\r\n          resolve({ exists: true, jsonRawData: jsonData });\r\n        }\r\n      });\r\n    };\r\n    let runCheckForPrompts = (checkObject: ICheckPromptsResponse): Promise<ICheckPromptsResponse> => {\r\n      return getJsonContent(this.settings.configPath, this.settings.authOptions)\r\n        .then(check => {\r\n          checkObject.needPrompts = !check.exists;\r\n          checkObject.jsonRawData = check.jsonRawData;\r\n          return checkObject;\r\n        })\r\n        .then(checkObj => {\r\n          if (typeof this.settings.defaultConfigPath !== 'undefined') {\r\n            return getJsonContent(this.settings.defaultConfigPath)\r\n              .then(check => {\r\n                checkObj.jsonRawData = {\r\n                  ...check.jsonRawData,\r\n                  ...checkObj.jsonRawData\r\n                };\r\n                return checkObject;\r\n              });\r\n          } else {\r\n            return checkObj;\r\n          }\r\n        })\r\n        .then(checkObj => {\r\n\r\n          this.context = (checkObj.jsonRawData as IAuthContextSettings);\r\n\r\n          let withPassword: boolean;\r\n          let strategies = this.strategies.filter((strategy: IStrategyDictItem) => {\r\n            return strategy.id === this.context.strategy;\r\n          });\r\n\r\n          let passwordPropertyName = getHiddenPropertyName(this.context);\r\n\r\n          if (strategies.length === 1) {\r\n            withPassword = strategies[0].withPassword;\r\n          } else {\r\n            withPassword = typeof this.context[passwordPropertyName] !== 'undefined';\r\n          }\r\n\r\n          // Strategies with password\r\n          if (withPassword) {\r\n            let initialPassword = `${this.context[passwordPropertyName] || ''}`;\r\n            if (!this.context[passwordPropertyName]) {\r\n              checkObj.needPrompts = true;\r\n            } else {\r\n              this.context[passwordPropertyName] = this.cpass.decode(this.context[passwordPropertyName]);\r\n              let decodedPassword = this.context[passwordPropertyName];\r\n              if (initialPassword === decodedPassword && this.settings.encryptPassword && this.settings.saveConfigOnDisk) {\r\n                checkObj.needSave = true;\r\n              }\r\n            }\r\n          }\r\n\r\n          checkObj.authContext = convertSettingsToAuthContext(this.context);\r\n\r\n          // Force prompts\r\n          if (this.settings.forcePrompts === true) {\r\n            checkObj.needPrompts = true;\r\n          }\r\n\r\n          // Verify strategy parameters\r\n          if (strategies.length === 1) {\r\n            if (!checkObj.needPrompts) {\r\n              checkObj.needPrompts = !strategies[0].verifyCallback(this.context.siteUrl, this.context);\r\n            }\r\n            return checkObj;\r\n          } else {\r\n            // No strategies found\r\n            if (checkObj.needPrompts) {\r\n              return checkObj;\r\n            } else {\r\n              try {\r\n                return this.tryAuth(checkObj.authContext)\r\n                  .then(() => {\r\n                    checkObj.needPrompts = false;\r\n                    return checkObj;\r\n                  })\r\n                  .catch((_error: any) => {\r\n                    checkObj.needPrompts = true;\r\n                    return checkObj;\r\n                  });\r\n              } catch (ex) {\r\n                checkObj.needPrompts = true;\r\n                return checkObj;\r\n              }\r\n            }\r\n          }\r\n        });\r\n    };\r\n    let checkPromptsObject: ICheckPromptsResponse = {\r\n      needPrompts: true,\r\n      needSave: false\r\n    };\r\n    return runCheckForPrompts(checkPromptsObject);\r\n  }\r\n\r\n}\r\n\r\nexport { IAuthContext, IAuthConfigSettings } from './interfaces';\r\nexport { IAuthOptions } from 'node-sp-auth';\r\n"]}