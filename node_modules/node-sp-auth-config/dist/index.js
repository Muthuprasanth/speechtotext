"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cpass_1 = require("cpass");
const spauth = require("node-sp-auth");
const utils_1 = require("./utils");
const siteUrl_1 = require("./wizards/siteUrl");
const chooseStrategy_1 = require("./wizards/chooseStrategy");
const askCredentials_1 = require("./wizards/askCredentials");
const saveOnDisk_1 = require("./wizards/saveOnDisk");
const config_1 = require("./config");
class AuthConfig {
    constructor(settings = {}) {
        this.getContext = () => {
            return this.checkForPrompts()
                .then((checkPromptsResponse) => {
                let authContext = Object.assign({}, checkPromptsResponse.authContext, { settings: this.settings });
                if (!checkPromptsResponse.needPrompts) {
                    if (checkPromptsResponse.needSave) {
                        return utils_1.saveConfigOnDisk(authContext, this.settings)
                            .then(_ => authContext);
                    }
                    else {
                        return new Promise(r => r(authContext));
                    }
                }
                else {
                    return siteUrl_1.default(authContext, {}, this.settings)
                        .then((answersResult) => {
                        return chooseStrategy_1.default(authContext, answersResult, this.settings);
                    })
                        .then((answersResult) => {
                        return askCredentials_1.default(authContext, answersResult, this.settings);
                    })
                        .then((answersResult) => {
                        if (typeof this.customData !== 'undefined') {
                            answersResult.custom = this.customData;
                        }
                        return saveOnDisk_1.default(authContext, answersResult, this.settings);
                    })
                        .then((answersResult) => {
                        return utils_1.convertSettingsToAuthContext(answersResult, this.settings);
                    });
                }
            });
        };
        this.tryAuth = (authContext) => {
            return spauth.getAuth(authContext.siteUrl, authContext.authOptions);
        };
        this.checkForPrompts = () => {
            let getJsonContent = (filePath, jsonData) => {
                return new Promise((resolve, reject) => {
                    if (typeof jsonData === 'undefined') {
                        fs.exists(filePath, (exists) => {
                            let jsonRawData = {};
                            if (exists) {
                                try {
                                    jsonRawData = JSON.parse(fs.readFileSync(path.resolve(filePath)).toString());
                                }
                                catch (ex) {
                                }
                            }
                            if (typeof jsonRawData.custom !== 'undefined') {
                                this.customData = jsonRawData.custom;
                                delete jsonRawData.custom;
                            }
                            resolve({ exists, jsonRawData });
                        });
                    }
                    else {
                        resolve({ exists: true, jsonRawData: jsonData });
                    }
                });
            };
            let runCheckForPrompts = (checkObject) => {
                return getJsonContent(this.settings.configPath, this.settings.authOptions)
                    .then(check => {
                    checkObject.needPrompts = !check.exists;
                    checkObject.jsonRawData = check.jsonRawData;
                    return checkObject;
                })
                    .then(checkObj => {
                    if (typeof this.settings.defaultConfigPath !== 'undefined') {
                        return getJsonContent(this.settings.defaultConfigPath)
                            .then(check => {
                            checkObj.jsonRawData = Object.assign({}, check.jsonRawData, checkObj.jsonRawData);
                            return checkObject;
                        });
                    }
                    else {
                        return checkObj;
                    }
                })
                    .then(checkObj => {
                    this.context = checkObj.jsonRawData;
                    let withPassword;
                    let strategies = this.strategies.filter((strategy) => {
                        return strategy.id === this.context.strategy;
                    });
                    let passwordPropertyName = utils_1.getHiddenPropertyName(this.context);
                    if (strategies.length === 1) {
                        withPassword = strategies[0].withPassword;
                    }
                    else {
                        withPassword = typeof this.context[passwordPropertyName] !== 'undefined';
                    }
                    if (withPassword) {
                        let initialPassword = `${this.context[passwordPropertyName] || ''}`;
                        if (!this.context[passwordPropertyName]) {
                            checkObj.needPrompts = true;
                        }
                        else {
                            this.context[passwordPropertyName] = this.cpass.decode(this.context[passwordPropertyName]);
                            let decodedPassword = this.context[passwordPropertyName];
                            if (initialPassword === decodedPassword && this.settings.encryptPassword && this.settings.saveConfigOnDisk) {
                                checkObj.needSave = true;
                            }
                        }
                    }
                    checkObj.authContext = utils_1.convertSettingsToAuthContext(this.context);
                    if (this.settings.forcePrompts === true) {
                        checkObj.needPrompts = true;
                    }
                    if (strategies.length === 1) {
                        if (!checkObj.needPrompts) {
                            checkObj.needPrompts = !strategies[0].verifyCallback(this.context.siteUrl, this.context);
                        }
                        return checkObj;
                    }
                    else {
                        if (checkObj.needPrompts) {
                            return checkObj;
                        }
                        else {
                            try {
                                return this.tryAuth(checkObj.authContext)
                                    .then(() => {
                                    checkObj.needPrompts = false;
                                    return checkObj;
                                })
                                    .catch((_error) => {
                                    checkObj.needPrompts = true;
                                    return checkObj;
                                });
                            }
                            catch (ex) {
                                checkObj.needPrompts = true;
                                return checkObj;
                            }
                        }
                    }
                });
            };
            let checkPromptsObject = {
                needPrompts: true,
                needSave: false
            };
            return runCheckForPrompts(checkPromptsObject);
        };
        this.strategies = config_1.getStrategies();
        this.targets = config_1.getTargetsTypes();
        this.settings = Object.assign({}, settings, { configPath: path.resolve(settings.configPath || './config/private.json'), encryptPassword: typeof settings.encryptPassword !== 'undefined' ? settings.encryptPassword : true, saveConfigOnDisk: typeof settings.saveConfigOnDisk !== 'undefined' ? settings.saveConfigOnDisk : true });
        if (typeof this.settings.encryptPassword === 'string') {
            this.settings.encryptPassword = !(this.settings.encryptPassword.toLowerCase() === 'false');
        }
        this.cpass = new cpass_1.Cpass(settings.masterKey);
    }
}
exports.AuthConfig = AuthConfig;

//# sourceMappingURL=index.js.map
