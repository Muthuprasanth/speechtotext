{"version":3,"sources":["cli.ts"],"names":[],"mappings":";;;AAEA,qCAAqC;AACrC,iCAAiC;AACjC,6BAA6B;AAG7B,wBAA+B;AAE/B,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;AAExE,OAAO;KACJ,OAAO,CAAC,OAAO,CAAC;KAChB,IAAI,CAAC,SAAS,CAAC;KACf,KAAK,CAAC,WAAW,CAAC;KAClB,WAAW,CAAC,6FAA6F,CAAC;KAC1G,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,oEAAoE,CAAC;KACjF,MAAM,CAAC,oBAAoB,EAAE,mEAAmE,CAAC;KACjG,MAAM,CAAC,6BAA6B,EAAE,6FAA6F,EAAE,IAAI,CAAC;KAC1I,MAAM,CAAC,yBAAyB,EAAE,gHAAgH,EAAE,IAAI,CAAC;KACzJ,MAAM,CAAC,CAAC,OAAuB,EAAE,EAAE;IAClC,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CACT,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,gCAAgC,CAAC,EACzE,MAAM,CAAC,IAAI,CAAC,2DAA2D,CAAC,CACzE,CAAC;QACF,OAAO,CAAC,IAAI,EAAE,CAAC;IACjB,CAAC;IAED,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAE7C,EAAE,CAAC,CAAC,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,CAAC,CAAC;QACxF,OAAO,CAAC,IAAI,EAAE,CAAC;IACjB,CAAC;IAED,MAAM,UAAU,GAAG,IAAI,aAAU,CAAC;QAChC,UAAU,EAAE,OAAO,CAAC,IAAI;QACxB,eAAe,EAAE,OAAO,CAAC,OAAO;QAChC,gBAAgB,EAAE,IAAI;QACtB,YAAY,EAAE,IAAI;QAClB,SAAS,EAAE,OAAO,CAAC,SAAS;KAC7B,CAAC,CAAC;IAEH,UAAU,CAAC,UAAU,EAAE;SACpB,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,CAAC,GAAG,CACT,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,GAAG;YAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CACxC,CAAC;IACJ,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEL,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAE5B,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,OAAO,CAAC,IAAI,EAAE,CAAC;AACjB,CAAC","file":"cli.js","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport * as program from 'commander';\r\nimport * as colors from 'colors';\r\nimport * as path from 'path';\r\n\r\nimport { ICliParameters } from './interfaces';\r\nimport { AuthConfig } from '.';\r\n\r\nconst { version } = require(path.join(__dirname, '..', 'package.json'));\r\n\r\nprogram\r\n  .version(version)\r\n  .name('sp-auth')\r\n  .usage('[command]')\r\n  .description('Command line config options builder for node-sp-auth (SharePoint Authentication in Node.js)')\r\n  .command('init')\r\n  .description('writes new file with node-sp-auth credentials into the file system')\r\n  .option('-p, --path [value]', 'relative path to file which will store your credentials, required')\r\n  .option('-e, --encrypt [true, false]', 'specify false if you don\\'t need to encrypt password in the file, optional, default is true', true)\r\n  .option('-k, --masterkey [value]', 'optional key used to encrypt and decrypt your sensitive data (passwords), by default unique machine id is used', null)\r\n  .action((options: ICliParameters) => {\r\n    if (typeof options.path === 'undefined') {\r\n      console.log(\r\n        colors.red(`'${colors.bold('-p, --path')}' parameter should be provided`),\r\n        colors.gray(`(relative path to file which will store your credentials)`)\r\n      );\r\n      process.exit();\r\n    }\r\n\r\n    const extension = path.extname(options.path);\r\n\r\n    if (extension !== '.json') {\r\n      console.log(colors.red(`'${colors.bold('--path')}' file extension should to be .json`));\r\n      process.exit();\r\n    }\r\n\r\n    const authConfig = new AuthConfig({\r\n      configPath: options.path,\r\n      encryptPassword: options.encrypt,\r\n      saveConfigOnDisk: true,\r\n      forcePrompts: true,\r\n      masterKey: options.masterkey\r\n    });\r\n\r\n    authConfig.getContext()\r\n      .then(() => {\r\n        console.log(\r\n          '\\n' + colors.green('File saved to') + ' ' +\r\n          colors.cyan(path.resolve(options.path))\r\n        );\r\n      });\r\n  });\r\n\r\nprogram.parse(process.argv);\r\n\r\nif (program.args.length === 0) {\r\n  program.help();\r\n}\r\n"]}