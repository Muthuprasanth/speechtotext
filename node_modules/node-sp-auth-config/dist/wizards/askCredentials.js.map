{"version":3,"sources":["wizards/askCredentials.ts"],"names":[],"mappings":";;AAKA,iEAAgE;AAChE,+DAA8D;AAC9D,6DAA4D;AAC5D,6DAA4D;AAC5D,2DAA0D;AAC1D,yDAAwD;AACxD,qDAAoD;AACpD,qDAAoD;AAGpD,MAAM,MAAM,GAAG,CACb,WAAyB,EACzB,aAA+B,EAAE,EACjC,WAAgC,EAAE,EACP,EAAE;IAC7B,IAAI,SAAS,GAAwB,EAAE,CAAC;IACxC,IAAI,OAAkC,CAAC;IAEvC,SAAS,GAAG,EAAE,CAAC;IACf,MAAM,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5B,KAAK,2BAA2B;YAC9B,OAAO,GAAG,wBAAoB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACxD,KAAK,CAAC;QACR,KAAK,0BAA0B;YAC7B,OAAO,GAAG,uBAAmB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACvD,KAAK,CAAC;QACR,KAAK,yBAAyB;YAC5B,OAAO,GAAG,sBAAkB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACtD,KAAK,CAAC;QACR,KAAK,yBAAyB;YAC5B,OAAO,GAAG,sBAAkB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACtD,KAAK,CAAC;QACR,KAAK,wBAAwB;YAC3B,OAAO,GAAG,qBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACrD,KAAK,CAAC;QACR,KAAK,iBAAiB;YACpB,OAAO,GAAG,oBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACpD,KAAK,CAAC;QACR,KAAK,qBAAqB;YACxB,OAAO,GAAG,kBAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAClD,KAAK,CAAC;QACR,KAAK,qBAAqB;YACxB,OAAO,GAAG,kBAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAClD,KAAK,CAAC;QACR;YACE,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1C,KAAK,CAAC;IACV,CAAC;IACD,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"askCredentials.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IAuthContext, IAuthConfigSettings } from '../interfaces';\r\n\r\n// Strategies wizards >>>\r\nimport onPremiseAddinWizard from './credentials/OnPremiseAddin';\r\nimport onPremiseUserWizard from './credentials/OnPremiseUser';\r\nimport onPremiseTmgWizard from './credentials/OnPremiseTmg';\r\nimport onPremiseFbaWizard from './credentials/OnPremiseFba';\r\nimport onlineAddinWizard from './credentials/OnlineAddin';\r\nimport onlineUserWizard from './credentials/OnlineUser';\r\nimport adfsUserWizard from './credentials/AdfsUser';\r\nimport onDemandWizard from './credentials/OnDemand';\r\n// <<< Strategies wizards\r\n\r\nconst wizard = (\r\n  authContext: IAuthContext,\r\n  answersAll: inquirer.Answers = {},\r\n  settings: IAuthConfigSettings = {}\r\n): Promise<inquirer.Answers> => {\r\n  let promptFor: inquirer.Question[] = [];\r\n  let answers: Promise<inquirer.Answers>;\r\n  // Ask for strategy specific parameters\r\n  promptFor = [];\r\n  switch (answersAll.strategy) {\r\n    case 'OnPremiseAddinCredentials':\r\n      answers = onPremiseAddinWizard(authContext, answersAll);\r\n      break;\r\n    case 'OnpremiseUserCredentials':\r\n      answers = onPremiseUserWizard(authContext, answersAll);\r\n      break;\r\n    case 'OnpremiseTmgCredentials':\r\n      answers = onPremiseTmgWizard(authContext, answersAll);\r\n      break;\r\n    case 'OnpremiseFbaCredentials':\r\n      answers = onPremiseFbaWizard(authContext, answersAll);\r\n      break;\r\n    case 'OnlineAddinCredentials':\r\n      answers = onlineAddinWizard(authContext, answersAll);\r\n      break;\r\n    case 'UserCredentials':\r\n      answers = onlineUserWizard(authContext, answersAll);\r\n      break;\r\n    case 'AdfsUserCredentials':\r\n      answers = adfsUserWizard(authContext, answersAll);\r\n      break;\r\n    case 'OnDemandCredentials':\r\n      answers = onDemandWizard(authContext, answersAll);\r\n      break;\r\n    default:\r\n      answers = new Promise(r => r(answersAll));\r\n      break;\r\n  }\r\n  return answers;\r\n};\r\n\r\nexport default wizard;\r\n"]}