{"version":3,"sources":["wizards/credentials/OnPremiseUser.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAIrC,uCAAkD;AAElD,MAAM,MAAM,GAAG,CAAC,WAAyB,EAAE,aAA+B,EAAE,EAAE,WAAgC,EAAE,EAA6B,EAAE;IAC7I,IAAI,wBAAwB,GAA+B,WAAW,CAAC,WAAyC,CAAC;IACjH,IAAI,SAAS,GAAwB;QACnC;YACE,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,wBAAwB,CAAC,QAAQ;YAC1C,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF;KACF,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;SAC9B,IAAI,CAAC,CAAC,OAAyB,EAAE,EAAE;QAClC,UAAU,qBACL,UAAU,EACV,OAAO,CACX,CAAC;QACF,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC1D,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,UAAU,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC;QACD,SAAS,GAAG,EAAE,CAAC;QACf,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,SAAS,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,wBAAwB,CAAC,MAAM;gBACxC,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;oBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC;aACF,CAAC,CAAC;QACL,CAAC;QACD,SAAS,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAAmB,CAAC,CAAC,CAAC,IAAI;YACvE,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;aAE9B,IAAI,CAAC,CAAC,OAAyB,EAAE,EAAE;YAClC,UAAU,qBACL,UAAU,EACV,OAAO,IACV,QAAQ,EAAE,OAAO,CAAC,QAAQ,KAAK,2BAAmB;oBAChD,CAAC,CAAC,wBAAwB,CAAC,QAAQ;oBACnC,CAAC,CAAC,OAAO,CAAC,QAAQ,GACrB,CAAC;YACF,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"OnPremiseUser.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IOnpremiseUserCredentials } from 'node-sp-auth';\r\nimport { IAuthContext, IAuthConfigSettings } from '../../interfaces';\r\nimport { defaultPasswordMask } from '../../utils';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  let onPremiseUserCredentials: IOnpremiseUserCredentials = (authContext.authOptions as IOnpremiseUserCredentials);\r\n  let promptFor: inquirer.Question[] = [\r\n    {\r\n      name: 'username',\r\n      message: 'User name',\r\n      type: 'input',\r\n      default: onPremiseUserCredentials.username,\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  ];\r\n  return inquirer.prompt(promptFor)\r\n    .then((answers: inquirer.Answers) => {\r\n      answersAll = {\r\n        ...answersAll,\r\n        ...answers\r\n      };\r\n      let noDomain = false;\r\n      if (answers.username.indexOf('@') !== -1) {\r\n        noDomain = true;\r\n      }\r\n      if (answers.username.indexOf('\\\\') !== -1) {\r\n        noDomain = true;\r\n        answers.username = answers.username.replace('\\\\\\\\', '\\\\');\r\n        answersAll.domain = answers.username.split('\\\\')[0];\r\n        answersAll.username = answers.username.split('\\\\')[1];\r\n      }\r\n      promptFor = [];\r\n      if (!noDomain) {\r\n        promptFor.push({\r\n          name: 'domain',\r\n          message: 'Domain',\r\n          type: 'input',\r\n          default: onPremiseUserCredentials.domain,\r\n          validate: (answer: string) => {\r\n            if (answer.length === 0) {\r\n              return false;\r\n            }\r\n            return true;\r\n          }\r\n        });\r\n      }\r\n      promptFor.push({\r\n        name: 'password',\r\n        message: 'Password',\r\n        type: 'password',\r\n        default: onPremiseUserCredentials.password ? defaultPasswordMask : null,\r\n        validate: (answer: string) => {\r\n          if (answer.length === 0) {\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n      });\r\n      return inquirer.prompt(promptFor)\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        .then((answers: inquirer.Answers) => {\r\n          answersAll = {\r\n            ...answersAll,\r\n            ...answers,\r\n            password: answers.password === defaultPasswordMask\r\n              ? onPremiseUserCredentials.password\r\n              : answers.password\r\n          };\r\n          return answersAll;\r\n        });\r\n    });\r\n};\r\n\r\nexport default wizard;\r\n"]}