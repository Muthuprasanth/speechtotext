{"version":3,"sources":["wizards/credentials/AdfsUser.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAIrC,uCAAkD;AAElD,MAAM,MAAM,GAAG,CAAC,WAAyB,EAAE,aAA+B,EAAE,EAAE,WAAgC,EAAE,EAA6B,EAAE;IAC7I,IAAI,mBAAmB,GAA0B,WAAW,CAAC,WAAoC,CAAC;IAClG,IAAI,SAAS,GAAwB;QACnC;YACE,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,mBAAmB,CAAC,QAAQ;YACrC,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF,EAAE;YACD,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAAmB,CAAC,CAAC,CAAC,IAAI;YAClE,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF,EAAE;YACD,IAAI,EAAE,cAAc;YACpB,OAAO,EAAE,cAAc;YACvB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,mBAAmB,CAAC,YAAY,IAAI,uBAAuB;YACpE,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF,EAAE;YACD,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,SAAS;YAClB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,mBAAmB,CAAC,OAAO;YACpC,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF,EAAE;YACD,IAAI,EAAE,YAAY;YAClB,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,mBAAmB,CAAC,UAAU,IAAI,SAAS;YACpD,QAAQ,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;SACF;KACF,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;SAC9B,IAAI,CAAC,CAAC,OAAyB,EAAE,EAAE;QAClC,MAAM,mBACD,UAAU,EACV,OAAO,IACV,QAAQ,EAAE,OAAO,CAAC,QAAQ,KAAK,2BAAmB;gBAChD,CAAC,CAAC,mBAAmB,CAAC,QAAQ;gBAC9B,CAAC,CAAC,OAAO,CAAC,QAAQ,IACpB;IACJ,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"AdfsUser.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IAdfsUserCredentials } from 'node-sp-auth';\r\nimport { IAuthContext, IAuthConfigSettings } from '../../interfaces';\r\nimport { defaultPasswordMask } from '../../utils';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  let adfsUserCredentials: IAdfsUserCredentials = (authContext.authOptions as IAdfsUserCredentials);\r\n  let promptFor: inquirer.Question[] = [\r\n    {\r\n      name: 'username',\r\n      message: 'User name',\r\n      type: 'input',\r\n      default: adfsUserCredentials.username,\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }, {\r\n      name: 'password',\r\n      message: 'Password',\r\n      type: 'password',\r\n      default: adfsUserCredentials.password ? defaultPasswordMask : null,\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }, {\r\n      name: 'relyingParty',\r\n      message: 'relyingParty',\r\n      type: 'input',\r\n      default: adfsUserCredentials.relyingParty || 'urn:sharepoint:portal',\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }, {\r\n      name: 'adfsUrl',\r\n      message: 'adfsUrl',\r\n      type: 'input',\r\n      default: adfsUserCredentials.adfsUrl,\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }, {\r\n      name: 'adfsCookie',\r\n      message: 'adfsCookie',\r\n      type: 'input',\r\n      default: adfsUserCredentials.adfsCookie || 'FedAuth',\r\n      validate: (answer: string) => {\r\n        if (answer.length === 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  ];\r\n  return inquirer.prompt(promptFor)\r\n    .then((answers: inquirer.Answers) => {\r\n      return {\r\n        ...answersAll,\r\n        ...answers,\r\n        password: answers.password === defaultPasswordMask\r\n          ? adfsUserCredentials.password\r\n          : answers.password\r\n      };\r\n    });\r\n};\r\n\r\nexport default wizard;\r\n"]}