{"version":3,"sources":["wizards/saveOnDisk.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,oCAAwG;AAGxG,MAAM,MAAM,GAAG,CAAC,WAAyB,EAAE,aAA+B,EAAE,EAAE,WAAgC,EAAE,EAA6B,EAAE;IAC7I,EAAE,CAAC,CAAC,OAAO,QAAQ,CAAC,gBAAgB,KAAK,WAAW,CAAC,CAAC,CAAC;QACrD,IAAI,SAAS,GAAwB,CAAC;gBACpC,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,eAAe;gBACxB,IAAI,EAAE,SAAS;aAChB,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;aAC9B,IAAI,CAAC,CAAC,OAAyB,EAAE,EAAE;YAClC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,wBAAgB,CAAC,oCAA4B,CAAC,UAA0B,CAAC,EAAE,QAAQ,CAAC;qBACxF,IAAI,CAAC,GAAG,EAAE;oBACT,MAAM,CAAC,UAAU,CAAC;gBACpB,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,wBAAgB,CAAC,oCAA4B,CAAC,UAA0B,CAAC,EAAE,QAAQ,CAAC;aACxF,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IACzC,CAAC;AACH,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"saveOnDisk.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { convertAuthContextToSettings, convertSettingsToAuthContext, saveConfigOnDisk } from '../utils';\r\nimport { IAuthContext, IAuthConfigSettings } from '../interfaces';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  if (typeof settings.saveConfigOnDisk === 'undefined') {\r\n    let promptFor: inquirer.Question[] = [{\r\n      name: 'save',\r\n      message: 'Save on disk?',\r\n      type: 'confirm'\r\n    }];\r\n    return inquirer.prompt(promptFor)\r\n      .then((answers: inquirer.Answers) => {\r\n        if (answers.save) {\r\n          return saveConfigOnDisk(convertSettingsToAuthContext(answersAll as IAuthContext), settings)\r\n            .then(() => {\r\n              return answersAll;\r\n            });\r\n        } else {\r\n          return answersAll;\r\n        }\r\n      });\r\n  } else if (settings.saveConfigOnDisk) {\r\n    return saveConfigOnDisk(convertSettingsToAuthContext(answersAll as IAuthContext), settings)\r\n      .then(() => {\r\n        return answersAll;\r\n      });\r\n  } else {\r\n    return new Promise(r => r(answersAll));\r\n  }\r\n};\r\n\r\nexport default wizard;\r\n"]}