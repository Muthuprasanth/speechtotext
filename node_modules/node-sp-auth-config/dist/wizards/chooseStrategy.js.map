{"version":3,"sources":["wizards/chooseStrategy.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAGrC,sCAA0C;AAC1C,oCAAoC;AAEpC,MAAM,MAAM,GAAG,CAAC,WAAyB,EAAE,aAA+B,EAAE,EAAE,WAAgC,EAAE,EAA6B,EAAE;IAC7I,IAAI,SAAS,GAAwB,EAAE,CAAC;IAGxC,IAAI,MAAM,GAA6B,gBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;IAC7F,IAAI,UAAU,GAAwB,sBAAa,EAAE,CAAC,MAAM,CAAC,CAAC,QAA2B,EAAE,EAAE;QAC3F,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,SAAS,GAAG,CAAC;YACX,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,yBAAyB;YAClC,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,QAA2B,EAAE,EAAE;gBACtD,MAAM,CAAC;oBACL,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,KAAK,EAAE,QAAQ,CAAC,EAAE;oBAClB,KAAK,EAAE,QAAQ,CAAC,IAAI;iBACrB,CAAC;YACJ,CAAC,CAAC;YACF,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,QAAgB,EAAE,QAA2B,EAAE,KAAa,EAAE,EAAE;gBAC1F,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzC,QAAQ,GAAG,KAAK,CAAC;gBACnB,CAAC;gBACD,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC,EAAE,CAAC,CAAC;SACN,CAAC,CAAC;IAEH,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;SAC9B,IAAI,CAAC,CAAC,OAAyB,EAAE,EAAE;QAClC,MAAM,mBACD,UAAU,EACV,OAAO,EACV;IACJ,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"chooseStrategy.js","sourcesContent":["import * as inquirer from 'inquirer';\r\n\r\nimport { IAuthContext, IAuthConfigSettings, IStrategyDictItem } from '../interfaces';\r\nimport { getStrategies } from '../config';\r\nimport { isOnPrem } from '../utils';\r\n\r\nconst wizard = (authContext: IAuthContext, answersAll: inquirer.Answers = {}, settings: IAuthConfigSettings = {}): Promise<inquirer.Answers> => {\r\n  let promptFor: inquirer.Question[] = [];\r\n\r\n  // SharePoint Online/OnPremise autodetection\r\n  let target: ('Online' | 'OnPremise') = isOnPrem(answersAll.siteUrl) ? 'OnPremise' : 'Online';\r\n  let strategies: IStrategyDictItem[] = getStrategies().filter((strategy: IStrategyDictItem) => {\r\n    return strategy.target.indexOf(target) !== -1;\r\n  });\r\n\r\n  promptFor = [{\r\n    name: 'strategy',\r\n    message: 'Authentication strategy',\r\n    type: 'list',\r\n    choices: strategies.map((strategy: IStrategyDictItem) => {\r\n      return {\r\n        name: strategy.name,\r\n        value: strategy.id,\r\n        short: strategy.name\r\n      };\r\n    }),\r\n    default: strategies.reduce((position: number, strategy: IStrategyDictItem, index: number) => {\r\n      if (authContext.strategy === strategy.id) {\r\n        position = index;\r\n      }\r\n      return position;\r\n    }, 0)\r\n  }];\r\n  // tslint:disable-next-line:no-shadowed-variable\r\n  return inquirer.prompt(promptFor)\r\n    .then((answers: inquirer.Answers) => {\r\n      return {\r\n        ...answersAll,\r\n        ...answers\r\n      };\r\n    });\r\n};\r\n\r\nexport default wizard;\r\n"]}