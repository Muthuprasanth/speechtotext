"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp = require("mkdirp");
const path = require("path");
const fs = require("fs");
const url = require("url");
const cpass_1 = require("cpass");
exports.convertAuthContextToSettings = (authContext, settings = {}) => {
    let passwordPropertyName = exports.getHiddenPropertyName(authContext.authOptions);
    let password = authContext.authOptions[passwordPropertyName];
    let plainContext = Object.assign({ siteUrl: authContext.siteUrl, strategy: authContext.strategy }, authContext.authOptions, { custom: authContext.custom });
    if (typeof password !== 'undefined' && settings.encryptPassword) {
        let cpass = new cpass_1.Cpass(settings.masterKey);
        let decodedPassword = cpass.decode(password);
        let encodedPassword = cpass.encode(decodedPassword);
        plainContext = Object.assign({}, plainContext);
        plainContext[passwordPropertyName] = encodedPassword;
    }
    return plainContext;
};
exports.convertSettingsToAuthContext = (configObject, settings = {}) => {
    let formattedContext = {
        siteUrl: configObject.siteUrl || '',
        strategy: configObject.strategy,
        authOptions: Object.assign({}, configObject),
        settings,
        custom: configObject.custom
    };
    if (typeof formattedContext.custom === 'undefined') {
        delete formattedContext.custom;
    }
    delete formattedContext.authOptions.siteUrl;
    delete formattedContext.authOptions.strategy;
    delete formattedContext.authOptions.custom;
    return formattedContext;
};
exports.saveConfigOnDisk = (authContext, settings) => {
    return new Promise((resolve, reject) => {
        let configDataJson = exports.convertAuthContextToSettings(authContext, settings);
        let saveFolderPath = path.dirname(settings.configPath);
        mkdirp(saveFolderPath, (err) => {
            if (err) {
                console.log('Error creating folder ' + '`' + saveFolderPath + ' `', err);
            }
            fs.writeFile(settings.configPath, JSON.stringify(configDataJson, null, 2), 'utf8', (err) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                resolve();
            });
        });
    });
};
exports.defaultPasswordMask = '********';
exports.getHiddenPropertyName = (data) => {
    if (data.password) {
        return 'password';
    }
    if (data.clientSecret) {
        return 'clientSecret';
    }
    return undefined;
};
exports.isOnPrem = (siteUrl) => {
    let host = (url.parse(siteUrl.toLocaleLowerCase())).host;
    return [
        '.sharepoint.com',
        '.sharepoint.cn',
        '.sharepoint.de',
        '.sharepoint-mil.us',
        '.sharepoint.us'
    ]
        .filter(uri => host.indexOf(uri) !== -1)
        .length === 0;
};

//# sourceMappingURL=index.js.map
