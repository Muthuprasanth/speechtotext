{"version":3,"sources":["utils/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as mkdirp from 'mkdirp';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as url from 'url';\r\nimport { Cpass } from 'cpass';\r\n\r\nimport { IAuthContext, IAuthContextSettings, IAuthConfigSettings } from '../interfaces';\r\n\r\nexport const convertAuthContextToSettings = (authContext: IAuthContext, settings: IAuthConfigSettings = {}): IAuthContextSettings => {\r\n  let passwordPropertyName = getHiddenPropertyName(authContext.authOptions as any);\r\n  let password = (authContext.authOptions as any)[passwordPropertyName];\r\n  let plainContext: IAuthContextSettings = {\r\n    siteUrl: authContext.siteUrl,\r\n    strategy: authContext.strategy,\r\n    ...authContext.authOptions,\r\n    custom: authContext.custom\r\n  };\r\n  if (typeof password !== 'undefined' && settings.encryptPassword) {\r\n    let cpass = new Cpass(settings.masterKey);\r\n    let decodedPassword = cpass.decode(password);\r\n    let encodedPassword = cpass.encode(decodedPassword);\r\n    plainContext = {\r\n      ...plainContext\r\n    };\r\n    plainContext[passwordPropertyName] = encodedPassword;\r\n  }\r\n  return plainContext;\r\n};\r\n\r\nexport const convertSettingsToAuthContext = (configObject: IAuthContextSettings, settings: IAuthConfigSettings = {}): IAuthContext => {\r\n  let formattedContext: IAuthContext = {\r\n    siteUrl: configObject.siteUrl || '',\r\n    strategy: configObject.strategy,\r\n    authOptions: {\r\n      ...(configObject as any)\r\n    },\r\n    settings,\r\n    custom: configObject.custom\r\n  };\r\n  if (typeof formattedContext.custom === 'undefined') {\r\n    delete formattedContext.custom;\r\n  }\r\n  delete (formattedContext.authOptions as any).siteUrl;\r\n  delete (formattedContext.authOptions as any).strategy;\r\n  delete (formattedContext.authOptions as any).custom;\r\n  return formattedContext;\r\n};\r\n\r\nexport const saveConfigOnDisk = (authContext: IAuthContext, settings: IAuthConfigSettings): Promise<any> => {\r\n  return new Promise((resolve: typeof Promise.resolve, reject: typeof Promise.reject) => {\r\n    let configDataJson = convertAuthContextToSettings(authContext, settings);\r\n    let saveFolderPath = path.dirname(settings.configPath);\r\n    mkdirp(saveFolderPath, (err: any) => {\r\n      if (err) {\r\n        console.log('Error creating folder ' + '`' + saveFolderPath + ' `', err);\r\n      }\r\n      // tslint:disable-next-line:no-shadowed-variable\r\n      fs.writeFile(settings.configPath, JSON.stringify(configDataJson, null, 2), 'utf8', (err: any) => {\r\n        if (err) {\r\n          console.log(err);\r\n          return reject(err);\r\n        }\r\n        resolve();\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nexport const defaultPasswordMask: string = '********';\r\n\r\nexport const getHiddenPropertyName = (data: { [key: string]: string }): string => {\r\n  if (data.password) {\r\n    return 'password';\r\n  }\r\n  if (data.clientSecret) {\r\n    return 'clientSecret';\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nexport const isOnPrem = (siteUrl: string): boolean => {\r\n  let host: string = (url.parse(siteUrl.toLocaleLowerCase())).host;\r\n  return [\r\n    '.sharepoint.com',\r\n    '.sharepoint.cn',\r\n    '.sharepoint.de',\r\n    '.sharepoint-mil.us',\r\n    '.sharepoint.us'\r\n  ]\r\n    .filter(uri => host.indexOf(uri) !== -1)\r\n    .length === 0;\r\n};\r\n"]}